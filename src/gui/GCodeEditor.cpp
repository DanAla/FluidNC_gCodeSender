/**
 * gui/GCodeEditor.cpp
 * G-code Editor Panel implementation with dummy content
 */

#include "GCodeEditor.h"
#include <wx/sizer.h>
#include <wx/msgdlg.h>
#include <wx/filedlg.h>
#include <wx/textctrl.h>
#include <wx/notebook.h>
#include <wx/tokenzr.h>

// Control IDs
enum {
    ID_EDITOR = wxID_HIGHEST + 3000,
    ID_NEW_FILE,
    ID_OPEN_FILE,
    ID_SAVE_FILE,
    ID_SAVE_AS,
    ID_CLOSE_FILE,
    ID_CUT,
    ID_COPY,
    ID_PASTE,
    ID_UNDO,
    ID_REDO,
    ID_FIND,
    ID_REPLACE,
    ID_GOTO,
    ID_SEND_TO_MACHINE,
    ID_VALIDATE_CODE,
    ID_ANALYZE_JOB,
    ID_STATISTICS_LIST,
    ID_ISSUES_LIST
};

wxBEGIN_EVENT_TABLE(GCodeEditor, wxPanel)
    EVT_BUTTON(ID_NEW_FILE, GCodeEditor::OnNew)
    EVT_BUTTON(ID_OPEN_FILE, GCodeEditor::OnOpen)
    EVT_BUTTON(ID_SAVE_FILE, GCodeEditor::OnSave)
    EVT_BUTTON(ID_SAVE_AS, GCodeEditor::OnSaveAs)
    EVT_BUTTON(ID_ANALYZE_JOB, GCodeEditor::OnValidateCode)
    EVT_BUTTON(ID_SEND_TO_MACHINE, GCodeEditor::OnSendToMachine)
    EVT_BUTTON(ID_VALIDATE_CODE, GCodeEditor::OnValidateCode)
wxEND_EVENT_TABLE()

GCodeEditor::GCodeEditor(wxWindow* parent)
    : wxPanel(parent, wxID_ANY), m_splitter(nullptr), m_editor(nullptr), 
      m_modified(false)
{
    CreateControls();
    
    // Initialize with sample G-code
    std::string sampleCode = "; Sample G-code file\n"
                           "; Generated by FluidNC G-code Sender\n"
                           "\n"
                           "G21 ; Set units to millimeters\n"
                           "G90 ; Absolute positioning\n"
                           "G17 ; XY plane selection\n"
                           "\n"
                           "; Home all axes\n"
                           "G28\n"
                           "\n"
                           "; Start job\n"
                           "M3 S1000 ; Start spindle at 1000 RPM\n"
                           "G1 F300 ; Set feed rate to 300 mm/min\n"
                           "\n"
                           "; Simple square pattern\n"
                           "G0 X0 Y0 Z5\n"
                           "G1 Z0\n"
                           "G1 X10 Y0\n"
                           "G1 X10 Y10\n"
                           "G1 X0 Y10\n"
                           "G1 X0 Y0\n"
                           "G0 Z5\n"
                           "\n"
                           "; End job\n"
                           "M5 ; Stop spindle\n"
                           "G0 Z10 ; Raise Z\n"
                           "G0 X0 Y0 ; Return to origin\n"
                           "M30 ; End program\n";
    
    SetText(sampleCode);
    UpdateJobStatistics();
}

void GCodeEditor::CreateControls()
{
    wxBoxSizer* mainSizer = new wxBoxSizer(wxVERTICAL);
    
    // Title
    wxStaticText* title = new wxStaticText(this, wxID_ANY, "G-code Editor");
    title->SetFont(title->GetFont().Scale(1.2).Bold());
    mainSizer->Add(title, 0, wxALL | wxCENTER, 5);
    
    // Toolbar
    CreateToolbar();
    mainSizer->Add(m_toolbar, 0, wxEXPAND | wxLEFT | wxRIGHT, 5);
    
    // Splitter window
    m_splitter = new wxSplitterWindow(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 
                                     wxSP_3D | wxSP_LIVE_UPDATE);
    m_splitter->SetMinimumPaneSize(150);
    
    CreateEditor();
    CreateJobPanel();
    
    m_splitter->SplitHorizontally(m_editorPanel, m_jobPanel, -200);
    
    mainSizer->Add(m_splitter, 1, wxALL | wxEXPAND, 5);
    SetSizer(mainSizer);
}

void GCodeEditor::CreateToolbar()
{
    try {
        // Create a simple button panel instead of toolbar to avoid bitmap issues
        m_toolbar = new wxPanel(this, wxID_ANY);
        wxBoxSizer* toolbarSizer = new wxBoxSizer(wxHORIZONTAL);
        
        // File operations
        wxButton* newBtn = new wxButton(m_toolbar, ID_NEW_FILE, "New", wxDefaultPosition, wxSize(60, -1));
        wxButton* openBtn = new wxButton(m_toolbar, ID_OPEN_FILE, "Open", wxDefaultPosition, wxSize(60, -1));
        wxButton* saveBtn = new wxButton(m_toolbar, ID_SAVE_FILE, "Save", wxDefaultPosition, wxSize(60, -1));
        
        toolbarSizer->Add(newBtn, 0, wxRIGHT, 2);
        toolbarSizer->Add(openBtn, 0, wxRIGHT, 2);
        toolbarSizer->Add(saveBtn, 0, wxRIGHT, 10);
        
        // G-code operations
        wxButton* validateBtn = new wxButton(m_toolbar, ID_VALIDATE_CODE, "Validate", wxDefaultPosition, wxSize(80, -1));
        wxButton* sendBtn = new wxButton(m_toolbar, ID_SEND_TO_MACHINE, "Send to Machine", wxDefaultPosition, wxSize(120, -1));
        
        toolbarSizer->Add(validateBtn, 0, wxRIGHT, 2);
        toolbarSizer->Add(sendBtn, 0, wxRIGHT, 10);
        
        toolbarSizer->AddStretchSpacer();
        m_toolbar->SetSizer(toolbarSizer);
        
    } catch (const std::exception& e) {
        // Create minimal toolbar on error
        m_toolbar = new wxPanel(this, wxID_ANY);
        wxStaticText* errorText = new wxStaticText(m_toolbar, wxID_ANY, "Toolbar Error - Using simplified interface");
        wxBoxSizer* sizer = new wxBoxSizer(wxHORIZONTAL);
        sizer->Add(errorText, 1, wxALL | wxALIGN_CENTER_VERTICAL, 5);
        m_toolbar->SetSizer(sizer);
    }
}

void GCodeEditor::CreateEditor()
{
    m_editorPanel = new wxPanel(m_splitter, wxID_ANY);
    wxBoxSizer* editorSizer = new wxBoxSizer(wxVERTICAL);
    
    // For now, use a simple text control instead of wxStyledTextCtrl
    // This avoids dependency issues with Scintilla
    m_editor = nullptr; // Will be replaced with wxTextCtrl for now
    
    wxTextCtrl* textEditor = new wxTextCtrl(m_editorPanel, ID_EDITOR, wxEmptyString,
                                           wxDefaultPosition, wxDefaultSize,
                                           wxTE_MULTILINE | wxTE_DONTWRAP | 
                                           wxTE_RICH2 | wxHSCROLL);
    
    // Use monospace font
    wxFont font(10, wxFONTFAMILY_TELETYPE, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL);
    textEditor->SetFont(font);
    
    editorSizer->Add(textEditor, 1, wxALL | wxEXPAND, 5);
    
    m_editorPanel->SetSizer(editorSizer);
    
    // Store reference for text operations (temporary solution)
    m_editorPanel->SetClientData(textEditor);
}

void GCodeEditor::CreateJobPanel()
{
    m_jobPanel = new wxPanel(m_splitter, wxID_ANY);
    wxBoxSizer* jobSizer = new wxBoxSizer(wxVERTICAL);
    
    // Job info title
    wxStaticText* jobTitle = new wxStaticText(m_jobPanel, wxID_ANY, "Job Information");
    jobTitle->SetFont(jobTitle->GetFont().Bold());
    jobSizer->Add(jobTitle, 0, wxALL, 5);
    
    // Create notebook for tabs
    wxNotebook* notebook = new wxNotebook(m_jobPanel, wxID_ANY);
    
    // Statistics tab
    wxPanel* statsPanel = new wxPanel(notebook, wxID_ANY);
    wxBoxSizer* statsSizer = new wxBoxSizer(wxVERTICAL);
    
    m_statisticsList = new wxListCtrl(statsPanel, ID_STATISTICS_LIST, wxDefaultPosition, wxDefaultSize,
                                     wxLC_REPORT | wxLC_SINGLE_SEL);
    m_statisticsList->AppendColumn("Property", wxLIST_FORMAT_LEFT, 120);
    m_statisticsList->AppendColumn("Value", wxLIST_FORMAT_LEFT, 100);
    
    statsSizer->Add(m_statisticsList, 1, wxALL | wxEXPAND, 5);
    statsPanel->SetSizer(statsSizer);
    notebook->AddPage(statsPanel, "Statistics");
    
    // Issues tab
    wxPanel* issuesPanel = new wxPanel(notebook, wxID_ANY);
    wxBoxSizer* issuesSizer = new wxBoxSizer(wxVERTICAL);
    
    m_issuesList = new wxListCtrl(issuesPanel, ID_ISSUES_LIST, wxDefaultPosition, wxDefaultSize,
                                 wxLC_REPORT | wxLC_SINGLE_SEL);
    m_issuesList->AppendColumn("Type", wxLIST_FORMAT_LEFT, 80);
    m_issuesList->AppendColumn("Line", wxLIST_FORMAT_LEFT, 60);
    m_issuesList->AppendColumn("Description", wxLIST_FORMAT_LEFT, 200);
    
    issuesSizer->Add(m_issuesList, 1, wxALL | wxEXPAND, 5);
    issuesPanel->SetSizer(issuesSizer);
    notebook->AddPage(issuesPanel, "Issues");
    
    jobSizer->Add(notebook, 1, wxALL | wxEXPAND, 5);
    
    // Action buttons
    wxBoxSizer* btnSizer = new wxBoxSizer(wxHORIZONTAL);
    
    m_analyzeBtn = new wxButton(m_jobPanel, ID_ANALYZE_JOB, "Analyze");
    m_validateBtn = new wxButton(m_jobPanel, ID_VALIDATE_CODE, "Validate");
    m_sendBtn = new wxButton(m_jobPanel, ID_SEND_TO_MACHINE, "Send to Machine");
    
    btnSizer->Add(m_analyzeBtn, 0, wxRIGHT, 5);
    btnSizer->Add(m_validateBtn, 0, wxRIGHT, 5);
    btnSizer->AddStretchSpacer();
    btnSizer->Add(m_sendBtn, 0);
    
    jobSizer->Add(btnSizer, 0, wxALL | wxEXPAND, 5);
    
    m_jobPanel->SetSizer(jobSizer);
}

void GCodeEditor::SetText(const std::string& text)
{
    wxTextCtrl* textEditor = static_cast<wxTextCtrl*>(m_editorPanel->GetClientData());
    if (textEditor) {
        textEditor->SetValue(wxString::FromUTF8(text));
        m_modified = false;
    }
}

std::string GCodeEditor::GetText() const
{
    wxTextCtrl* textEditor = static_cast<wxTextCtrl*>(m_editorPanel->GetClientData());
    if (textEditor) {
        return textEditor->GetValue().ToStdString();
    }
    return "";
}

void GCodeEditor::SetReadOnly(bool readOnly)
{
    wxTextCtrl* textEditor = static_cast<wxTextCtrl*>(m_editorPanel->GetClientData());
    if (textEditor) {
        textEditor->SetEditable(!readOnly);
    }
}

bool GCodeEditor::IsModified() const
{
    wxTextCtrl* textEditor = static_cast<wxTextCtrl*>(m_editorPanel->GetClientData());
    if (textEditor) {
        return textEditor->IsModified();
    }
    return m_modified;
}

void GCodeEditor::UpdateJobStatistics()
{
    // Clear existing statistics
    m_statisticsList->DeleteAllItems();
    m_issuesList->DeleteAllItems();
    
    std::string text = GetText();
    
    // Simple analysis
    int totalLines = 0;
    int codeLines = 0;
    int commentLines = 0;
    int emptyLines = 0;
    
    wxStringTokenizer tokenizer(wxString::FromUTF8(text), "\n");
    while (tokenizer.HasMoreTokens()) {
        wxString line = tokenizer.GetNextToken().Trim();
        totalLines++;
        
        if (line.IsEmpty()) {
            emptyLines++;
        } else if (line.StartsWith(";")) {
            commentLines++;
        } else {
            codeLines++;
        }
    }
    
    // Populate statistics
    long index = 0;
    
    index = m_statisticsList->InsertItem(index, "Total Lines");
    m_statisticsList->SetItem(index, 1, std::to_string(totalLines));
    
    index = m_statisticsList->InsertItem(index + 1, "Code Lines");
    m_statisticsList->SetItem(index, 1, std::to_string(codeLines));
    
    index = m_statisticsList->InsertItem(index + 1, "Comment Lines");
    m_statisticsList->SetItem(index, 1, std::to_string(commentLines));
    
    index = m_statisticsList->InsertItem(index + 1, "Empty Lines");
    m_statisticsList->SetItem(index, 1, std::to_string(emptyLines));
    
    index = m_statisticsList->InsertItem(index + 1, "Estimated Time");
    m_statisticsList->SetItem(index, 1, "~5 minutes");
    
    index = m_statisticsList->InsertItem(index + 1, "File Size");
    m_statisticsList->SetItem(index, 1, std::to_string(text.length()) + " bytes");
    
    // Add sample issues
    if (codeLines > 0) {
        index = m_issuesList->InsertItem(0, "Info");
        m_issuesList->SetItem(index, 1, "1");
        m_issuesList->SetItem(index, 2, "File ready for processing");
        
        if (totalLines > 50) {
            index = m_issuesList->InsertItem(1, "Warning");
            m_issuesList->SetItem(index, 1, "-");
            m_issuesList->SetItem(index, 2, "Large file - verify before sending");
        }
    }
}

// Event handlers
void GCodeEditor::OnNew(wxCommandEvent& WXUNUSED(event))
{
    if (PromptSaveChanges()) {
        SetText("");
        m_currentFile.clear();
        UpdateJobStatistics();
        wxMessageBox("New file created.", "New File", wxOK | wxICON_INFORMATION, this);
    }
}

void GCodeEditor::OnOpen(wxCommandEvent& WXUNUSED(event))
{
    wxFileDialog dialog(this, "Open G-code file", "", "",
                       "G-code files (*.gcode;*.nc;*.cnc)|*.gcode;*.nc;*.cnc|All files (*.*)|*.*",
                       wxFD_OPEN | wxFD_FILE_MUST_EXIST);
    
    if (dialog.ShowModal() == wxID_OK) {
        wxMessageBox(wxString::Format("Would open file: %s", dialog.GetPath()),
                     "Open File", wxOK | wxICON_INFORMATION, this);
    }
}

void GCodeEditor::OnSave(wxCommandEvent& WXUNUSED(event))
{
    if (m_currentFile.empty()) {
        wxCommandEvent evt;
        OnSaveAs(evt);
    } else {
        wxMessageBox(wxString::Format("Would save to: %s", m_currentFile),
                     "Save File", wxOK | wxICON_INFORMATION, this);
    }
}

void GCodeEditor::OnSaveAs(wxCommandEvent& WXUNUSED(event))
{
    wxFileDialog dialog(this, "Save G-code file", "", "",
                       "G-code files (*.gcode)|*.gcode|All files (*.*)|*.*",
                       wxFD_SAVE | wxFD_OVERWRITE_PROMPT);
    
    if (dialog.ShowModal() == wxID_OK) {
        wxMessageBox(wxString::Format("Would save as: %s", dialog.GetPath()),
                     "Save As", wxOK | wxICON_INFORMATION, this);
    }
}

void GCodeEditor::OnSendToMachine(wxCommandEvent& WXUNUSED(event))
{
    wxMessageBox("Would send G-code to the active machine.\n\nThis will stream the current G-code to the connected CNC machine.",
                 "Send to Machine", wxOK | wxICON_INFORMATION, this);
}

void GCodeEditor::OnValidateCode(wxCommandEvent& WXUNUSED(event))
{
    UpdateJobStatistics();
    wxMessageBox("G-code analysis completed.\n\nCheck the Statistics and Issues tabs for detailed information.",
                 "Validate G-code", wxOK | wxICON_INFORMATION, this);
}

bool GCodeEditor::PromptSaveChanges()
{
    if (IsModified()) {
        int result = wxMessageBox("The current file has unsaved changes.\n\nDo you want to save before continuing?",
                                 "Unsaved Changes", wxYES_NO | wxCANCEL | wxICON_QUESTION, this);
        
        if (result == wxCANCEL) {
            return false;
        } else if (result == wxYES) {
            wxCommandEvent evt;
            OnSave(evt);
        }
    }
    return true;
}

// Placeholder implementations for interface compliance
void GCodeEditor::NewFile() { wxCommandEvent evt; OnNew(evt); }
void GCodeEditor::OpenFile(const std::string& filename) { wxCommandEvent evt; OnOpen(evt); }
void GCodeEditor::SaveFile() { wxCommandEvent evt; OnSave(evt); }
void GCodeEditor::SaveFileAs() { wxCommandEvent evt; OnSaveAs(evt); }
bool GCodeEditor::CloseFile() { return PromptSaveChanges(); }
void GCodeEditor::AnalyzeJob() { UpdateJobStatistics(); }
